[{"C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\index.js":"1","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\reportWebVitals.js":"2","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\App.js":"3","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\components\\Charts\\Charts.js":"4","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\components\\Categories\\Categories.js":"5","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\components\\CurrentBalance\\CurrentBalance.jsx":"6","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\components\\transactions\\TransactionsPage.jsx":"7","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\components\\transactions\\TableTransactions.jsx":"8","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\components\\transactions\\TransactionRow.jsx":"9","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\common\\Icon.jsx":"10","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\context\\GlobalStage.js":"11","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\context\\AppReducer.js":"12"},{"size":517,"mtime":1611687667983,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1611687667984,"results":"15","hashOfConfig":"14"},{"size":1620,"mtime":1611687666320,"results":"16","hashOfConfig":"14"},{"size":210,"mtime":1611687666358,"results":"17","hashOfConfig":"14"},{"size":2556,"mtime":1611692261509,"results":"18","hashOfConfig":"14"},{"size":979,"mtime":1612087762663,"results":"19","hashOfConfig":"14"},{"size":2185,"mtime":1611687666440,"results":"20","hashOfConfig":"14"},{"size":5942,"mtime":1611687666413,"results":"21","hashOfConfig":"14"},{"size":2661,"mtime":1611687666437,"results":"22","hashOfConfig":"14"},{"size":949,"mtime":1611687666322,"results":"23","hashOfConfig":"14"},{"size":843,"mtime":1612087130381,"results":"24","hashOfConfig":"14"},{"size":444,"mtime":1612087061573,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1lj499w",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\index.js",[],["57","58"],"C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\reportWebVitals.js",[],"C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\App.js",["59"],"import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  NavLink,\r\n  Route,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport CurrentBalance from \"./components/CurrentBalance/CurrentBalance\";\r\nimport Charts from \"./components/Charts/Charts\";\r\nimport Categories from \"./components/Categories/Categories\";\r\nimport TransactionsPage from \"./components/transactions/TransactionsPage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"app\">\r\n        <div className=\"navigation-wrapper\">\r\n          <CurrentBalance />\r\n          <div className=\"link-list\">\r\n            <NavLink\r\n              to=\"/home\"\r\n              className=\"app-link\"\r\n              activeClassName=\"active-link\"\r\n            >\r\n              Home\r\n            </NavLink>\r\n            <NavLink\r\n              to=\"/charts\"\r\n              className=\"app-link\"\r\n              activeClassName=\"active-link\"\r\n            >\r\n              Charts\r\n            </NavLink>\r\n            <NavLink\r\n              to=\"/categories\"\r\n              className=\"app-link\"\r\n              activeClassName=\"active-link\"\r\n            >\r\n              Categories\r\n            </NavLink>\r\n          </div>\r\n        </div>\r\n        <div className=\"page\">\r\n          <Switch>\r\n            <Route path=\"/charts\" component={Charts}></Route>\r\n            <Route path=\"/categories\" component={Categories}></Route>\r\n            <Route path=\"/\" component={TransactionsPage}></Route>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\nexport default App;\r\n","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\components\\Charts\\Charts.js",[],"C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\components\\Categories\\Categories.js",["60"],"import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\r\nimport \"react-day-picker/lib/style.css\";\r\nimport MomentLocaleUtils, {\r\n  formatDate,\r\n  parseDate,\r\n} from \"react-day-picker/moment\";\r\nimport \"./Categories.css\";\r\nimport Icon from \"../../common/Icon\";\r\n\r\nconst categoriesOptions = [\r\n  { value: \"food\", label: \"Food\" },\r\n  { value: \"clothes\", label: \"Clothes\" },\r\n  { value: \"restaurant\", label: \"Restaurant\" },\r\n  { value: \"utility bills\", label: \"Utility bills\" },\r\n  { value: \"pets\", label: \"Pets\" },\r\n];\r\n\r\nfunction Categories({\r\n  id,\r\n  category,\r\n  description,\r\n  date,\r\n  onCategorieChange,\r\n  onSaveNewCategorie,\r\n  onCancelNewCategorie,\r\n}) {\r\n  return (\r\n    <tr className=\"categories\">\r\n      <td>\r\n        <Select\r\n          value={{ value: category, label: category }}\r\n          onChange={(selectedOption) =>\r\n            onCategorieChange({\r\n              id,\r\n              description,\r\n              date,\r\n              category: selectedOption.value,\r\n            })\r\n          }\r\n          options={categoriesOptions}\r\n        />\r\n      </td>\r\n      <td>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Description\"\r\n          onChange={({ target }) =>\r\n            onCategorieChange({\r\n              id,\r\n              description: target.value,\r\n              date,\r\n              category,\r\n            })\r\n          }\r\n          value={description}\r\n        />\r\n      </td>\r\n      <td>\r\n        <DayPickerInput\r\n          formatDate={formatDate}\r\n          parseDate={parseDate}\r\n          value={formatDate(date)}\r\n          onDayChange={(day) =>\r\n            onCategorieChange({\r\n              id,\r\n              description,\r\n              date: formatDate(day),\r\n              category,\r\n            })\r\n          }\r\n        />\r\n      </td>\r\n      <td>\r\n        {/* <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Money\"\r\n          onChange={({ target }) =>\r\n            onTransactionChange({\r\n              id,\r\n              description,\r\n              date,\r\n              money: target.value,\r\n              category,\r\n            })\r\n          }\r\n          value={money}\r\n        /> */}\r\n      </td>\r\n      <td>\r\n        <div className=\"action-buttons\">\r\n          <Icon iconName=\"save\" onClick={onSaveNewCategorie} />\r\n          <Icon iconName=\"cancel\" onClick={onCancelNewCategorie} />\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Categories;\r\n","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\components\\CurrentBalance\\CurrentBalance.jsx",[],"C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\components\\transactions\\TransactionsPage.jsx",["61","62","63"],"import React, { useEffect, useState } from \"react\";\r\n// import CurrentBalance from \"../CurrentBalance/CurrentBalance\";\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\n\r\nimport \"./TransactionsPage.css\";\r\nimport TableTransactions from \"./TableTransactions\";\r\n\r\nfunction TransactionsPage() {\r\n  const storedIncomes = JSON.parse(localStorage.getItem(\"incomes\")) || [];\r\n  const storedCharges = JSON.parse(localStorage.getItem(\"charges\")) || [];\r\n\r\n  const [balance, setBalance] = useState(0);\r\n\r\n  useEffect(() => {\r\n    getBalance(storedIncomes, storedCharges);\r\n  }, []);\r\n\r\n  const handleTransactionChange = (storageKey, transactions) => {\r\n    localStorage.setItem(storageKey, JSON.stringify(transactions));\r\n    const incomes = storageKey === \"incomes\" ? transactions : storedIncomes;\r\n    const charges = storageKey === \"charges\" ? transactions : storedCharges;\r\n    getBalance(incomes, charges);\r\n  };\r\n\r\n  const getBalance = (incomes, charges) => {\r\n    const incomesSum = incomes.reduce(\r\n      (total, income) => (total += +income.money),\r\n      0\r\n    );\r\n    const chargesSum = charges.reduce(\r\n      (total, charge) => (total += +charge.money),\r\n      0\r\n    );\r\n    setBalance(incomesSum - chargesSum);\r\n  };\r\n  {\r\n    /* <nav className=\"navigation-wrapper\">\r\n        <CurrentBalance balance={balance} />\r\n      </nav> */\r\n  }\r\n  return (\r\n    <div className=\"transaction-page\">\r\n      <Tabs defaultActiveKey=\"charges\" className=\"mb-5\">\r\n        <Tab eventKey=\"charges\" title=\"Charges\">\r\n          <TableTransactions\r\n            storedTransactionKey=\"charges\"\r\n            storedTransactions={storedCharges}\r\n            onTransactionChange={(transactions) =>\r\n              handleTransactionChange(\"charges\", transactions)\r\n            }\r\n          />\r\n        </Tab>\r\n        <Tab eventKey=\"incomes\" title=\"Incomes\">\r\n          <TableTransactions\r\n            storedTransactionKey=\"incomes\"\r\n            storedTransactions={storedIncomes}\r\n            onTransactionChange={(transactions) =>\r\n              handleTransactionChange(\"incomes\", transactions)\r\n            }\r\n          />\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransactionsPage;\r\n","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\components\\transactions\\TableTransactions.jsx",["64","65"],"import React, { useState } from \"react\";\r\n\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport MomentLocaleUtils, {\r\n  formatDate,\r\n  parseDate,\r\n} from \"react-day-picker/moment\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport TransactionRow from \"./TransactionRow\";\r\nimport \"./TableTransactions.css\";\r\nimport Icon from \"../../common/Icon\";\r\nimport _ from \"lodash\";\r\n\r\nfunction TableTransactions({ storedTransactions, onTransactionChange }) {\r\n  const [transactions, setTransactions] = useState(storedTransactions || []);\r\n  const [newTransaction, setNewTransaction] = useState(null);\r\n  const [editableTransactionId, setEditableTransactionId] = useState();\r\n  const [sort, setSort] = useState(\"desc\");\r\n  const [sortField, setSortField] = useState(\"id\");\r\n\r\n  const headers = [\"Category\", \"Description\", \"Date\", \"Money\", \"Action\"];\r\n\r\n  const handleAddNewTransaction = () => {\r\n    setNewTransaction({\r\n      id: uuidv4(),\r\n      category: \"\",\r\n      description: \"\",\r\n      date: formatDate(new Date()),\r\n      money: \"\",\r\n    });\r\n  };\r\n\r\n  const handleSaveNewTransaction = () => {\r\n    onTransactionChange([...transactions, newTransaction]);\r\n    setTransactions([...transactions, newTransaction]);\r\n    setNewTransaction(null);\r\n    setEditableTransactionId(null);\r\n  };\r\n\r\n  const handleSaveEditableTransaction = () => {\r\n    const updatedTransactions = transactions.map((transaction) => {\r\n      if (transaction.id === newTransaction.id) {\r\n        return newTransaction;\r\n      }\r\n      return transaction;\r\n    });\r\n    onTransactionChange(updatedTransactions);\r\n\r\n    setTransactions(updatedTransactions);\r\n    setNewTransaction(null);\r\n    setEditableTransactionId(null);\r\n  };\r\n\r\n  const handleCancelNewTransaction = () => {\r\n    setNewTransaction(null);\r\n    setEditableTransactionId(null);\r\n  };\r\n\r\n  const handleTransactionChange = (transaction) => {\r\n    setNewTransaction(transaction);\r\n  };\r\n\r\n  const handleEditTransaction = (transaction) => {\r\n    setEditableTransactionId(transaction.id);\r\n    setNewTransaction(transaction);\r\n  };\r\n\r\n  const handleDeleteTransaction = (id) => {\r\n    const arrayTransactions = transactions.filter(\r\n      (transaction) => transaction.id !== id\r\n    );\r\n    onTransactionChange(arrayTransactions);\r\n    setTransactions([...arrayTransactions]);\r\n  };\r\n\r\n  const buildTransactionRow = (transaction) => {\r\n    return (\r\n      <tr key={transaction.id}>\r\n        <td>{transaction.category}</td>\r\n        <td>{transaction.description}</td>\r\n        <td>{transaction.date}</td>\r\n        <td>{transaction.money}</td>\r\n        <td>\r\n          <div className=\"action-buttons\">\r\n            <Icon\r\n              iconName=\"edit\"\r\n              onClick={() => handleEditTransaction(transaction)}\r\n            />\r\n            <Icon\r\n              iconName=\"delete\"\r\n              onClick={() => handleDeleteTransaction(transaction.id)}\r\n            />\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const onSort = (category) => {\r\n    const cloneData = transactions.map((item) => {\r\n      if (typeof item.date === \"string\" || typeof moneyFormat === \"string\") {\r\n        const сorrectDateFormat = Date.parse(item.date);\r\n        const moneyFormat = item.money.replace(/\\D/g, \"\");\r\n        return {\r\n          ...item,\r\n          money: Number(moneyFormat),\r\n          date: сorrectDateFormat,\r\n        };\r\n      }\r\n      return item;\r\n    });\r\n\r\n    const sortType = sort === `desc` ? `asc` : `desc`;\r\n    setSort(sortType);\r\n    setSortField(category);\r\n    const orderedData = _.orderBy(cloneData, category.toLowerCase(), sortType);\r\n\r\n    const correctData = orderedData.map((item) => {\r\n      const date = new Date(item.date);\r\n\r\n      const correctDay = (date) =>\r\n        date.getDate() <= 9 ? `0${date.getDate()}` : `${date.getDate()}`;\r\n      const correctMounth = (date) =>\r\n        date.getMonth() <= 8\r\n          ? `0${date.getMonth() + 1}`\r\n          : `${date.getMonth() + 1}`;\r\n\r\n      const correctDateFormat = `${correctMounth(date)}/${correctDay(\r\n        date\r\n      )}/${date.getFullYear()}`;\r\n      return {\r\n        ...item,\r\n        money: item.money + \"$\",\r\n        date: correctDateFormat,\r\n      };\r\n    });\r\n    setTransactions(correctData);\r\n  };\r\n  return (\r\n    <div className=\"transaction-table\">\r\n      <div className=\"d-flex justify-content-end pb-3\">\r\n        <Icon iconName=\"add\" size=\"big\" onClick={handleAddNewTransaction} />\r\n      </div>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            {headers.map((header, index) => (\r\n              <th\r\n                key={index}\r\n                onClick={onSort.bind(null, `${header}`)}\r\n                className={sortField === header ? \"sort\" : \"notSorting\"}\r\n              >\r\n                {header}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {transactions.map((transaction) => {\r\n            if (editableTransactionId === transaction.id) {\r\n              return (\r\n                <TransactionRow\r\n                  key={transaction.id}\r\n                  {...newTransaction}\r\n                  onTransactionChange={handleTransactionChange}\r\n                  onSaveNewTransaction={handleSaveEditableTransaction}\r\n                  onCancelNewTransaction={handleCancelNewTransaction}\r\n                />\r\n              );\r\n            } else {\r\n              return buildTransactionRow(transaction);\r\n            }\r\n          })}\r\n          {newTransaction && !editableTransactionId && (\r\n            <TransactionRow\r\n              key={newTransaction.id}\r\n              {...newTransaction}\r\n              onTransactionChange={handleTransactionChange}\r\n              onSaveNewTransaction={handleSaveNewTransaction}\r\n              onCancelNewTransaction={handleCancelNewTransaction}\r\n            />\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TableTransactions;\r\n","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\components\\transactions\\TransactionRow.jsx",["66"],"import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\r\nimport \"react-day-picker/lib/style.css\";\r\nimport MomentLocaleUtils, {\r\n  formatDate,\r\n  parseDate,\r\n} from \"react-day-picker/moment\";\r\nimport \"./TransactionRow.css\";\r\nimport Icon from \"../../common/Icon\";\r\n\r\nconst transactionsOptions = [\r\n  { value: \"food\", label: \"Food\" },\r\n  { value: \"clothes\", label: \"Clothes\" },\r\n  { value: \"restaurant\", label: \"Restaurant\" },\r\n  { value: \"utility bills\", label: \"Utility bills\" },\r\n  { value: \"pets\", label: \"Pets\" },\r\n];\r\n\r\nfunction TransactionRow({\r\n  id,\r\n  category,\r\n  description,\r\n  date,\r\n  money,\r\n  onTransactionChange,\r\n  onSaveNewTransaction,\r\n  onCancelNewTransaction,\r\n}) {\r\n  return (\r\n    <tr className=\"transaction-row\">\r\n      <td>\r\n        <Select\r\n          value={{ value: category, label: category }}\r\n          onChange={(selectedOption) =>\r\n            onTransactionChange({\r\n              id,\r\n              description,\r\n              date,\r\n              money,\r\n              category: selectedOption.value,\r\n            })\r\n          }\r\n          options={transactionsOptions}\r\n        />\r\n      </td>\r\n      <td>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Description\"\r\n          onChange={({ target }) =>\r\n            onTransactionChange({\r\n              id,\r\n              description: target.value,\r\n              date,\r\n              money,\r\n              category,\r\n            })\r\n          }\r\n          value={description}\r\n        />\r\n      </td>\r\n      <td>\r\n        <DayPickerInput\r\n          formatDate={formatDate}\r\n          parseDate={parseDate}\r\n          value={formatDate(date)}\r\n          onDayChange={(day) =>\r\n            onTransactionChange({\r\n              id,\r\n              description,\r\n              date: formatDate(day),\r\n              money,\r\n              category,\r\n            })\r\n          }\r\n        />\r\n      </td>\r\n      <td>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Money\"\r\n          onChange={({ target }) =>\r\n            onTransactionChange({\r\n              id,\r\n              description,\r\n              date,\r\n              money: target.value,\r\n              category,\r\n            })\r\n          }\r\n          value={money}\r\n        />\r\n      </td>\r\n      <td>\r\n        <div className=\"action-buttons\">\r\n          <Icon iconName=\"save\" onClick={onSaveNewTransaction} />\r\n          <Icon iconName=\"cancel\" onClick={onCancelNewTransaction} />\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default TransactionRow;\r\n","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\common\\Icon.jsx",["67"],"import React from \"react\";\r\nimport AddIcon from \"../img/icons/png-icons/png/056-plus.png\";\r\nimport DeleteIcon from \"../img/icons/png-icons/png/058-error.png\";\r\nimport EditIcon from \"../img/icons/png-icons/png/218-edit.png\";\r\nimport SaveIcon from \"../img/icons/png-icons/png/059-success.png\";\r\nimport CancelIcon from \"../img/icons/png-icons/png/057-minus.png\";\r\nimport \"./Icon.css\";\r\n\r\nfunction Icon({ iconName, size = \"small\", onClick }) {\r\n  function getUrlByName(iconName) {\r\n    switch (iconName) {\r\n      case \"add\":\r\n        return AddIcon;\r\n      case \"delete\":\r\n        return DeleteIcon;\r\n      case \"edit\":\r\n        return EditIcon;\r\n      case \"save\":\r\n        return SaveIcon;\r\n      case \"cancel\":\r\n        return CancelIcon;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`icon-button-${size}`} onClick={onClick}>\r\n      <img src={getUrlByName(iconName)} alt={`${iconName} icon button`} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Icon;\r\n","C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\context\\GlobalStage.js",[],"C:\\Users\\Жека\\Desktop\\Expense\\Project\\src\\context\\AppReducer.js",["68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":6,"column":3,"nodeType":"75","messageId":"76","endLine":6,"endColumn":7},{"ruleId":"73","severity":1,"message":"77","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":25},{"ruleId":"73","severity":1,"message":"78","line":12,"column":10,"nodeType":"75","messageId":"76","endLine":12,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":16,"column":6,"nodeType":"81","endLine":16,"endColumn":8,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":36,"column":3,"nodeType":"85","messageId":"86","endLine":40,"endColumn":4},{"ruleId":"73","severity":1,"message":"77","line":5,"column":8,"nodeType":"75","messageId":"76","endLine":5,"endColumn":25},{"ruleId":"73","severity":1,"message":"87","line":7,"column":3,"nodeType":"75","messageId":"76","endLine":7,"endColumn":12},{"ruleId":"73","severity":1,"message":"77","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":25},{"ruleId":"88","severity":1,"message":"89","line":11,"column":5,"nodeType":"90","messageId":"91","endLine":22,"endColumn":6},{"ruleId":"92","severity":1,"message":"93","line":1,"column":1,"nodeType":"94","endLine":16,"endColumn":4},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'MomentLocaleUtils' is defined but never used.","'balance' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'storedCharges' and 'storedIncomes'. Either include them or remove the dependency array.","ArrayExpression",["97"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'parseDate' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},"Update the dependencies array to be: [storedCharges, storedIncomes]",{"range":"100","text":"101"},[564,566],"[storedCharges, storedIncomes]"]