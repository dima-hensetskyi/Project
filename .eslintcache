[{"/Users/julietty/cursor-education/Project/src/index.js":"1","/Users/julietty/cursor-education/Project/src/reportWebVitals.js":"2","/Users/julietty/cursor-education/Project/src/App.js":"3","/Users/julietty/cursor-education/Project/src/components/Charts/Charts.js":"4","/Users/julietty/cursor-education/Project/src/components/Categories/Categories.js":"5","/Users/julietty/cursor-education/Project/src/components/CurrentBalance/CurrentBalance.jsx":"6","/Users/julietty/cursor-education/Project/src/common/Icon.jsx":"7","/Users/julietty/cursor-education/Project/src/components/transactions/TransactionsPage.jsx":"8","/Users/julietty/cursor-education/Project/src/components/transactions/CurrentBalance.jsx":"9","/Users/julietty/cursor-education/Project/src/components/transactions/TableTransactions.jsx":"10","/Users/julietty/cursor-education/Project/src/components/transactions/TransactionRow.jsx":"11"},{"size":500,"mtime":1610448991518,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1610448991519,"results":"14","hashOfConfig":"13"},{"size":1563,"mtime":1611169251688,"results":"15","hashOfConfig":"13"},{"size":198,"mtime":1611154985593,"results":"16","hashOfConfig":"13"},{"size":173,"mtime":1611169225684,"results":"17","hashOfConfig":"13"},{"size":320,"mtime":1611154985593,"results":"18","hashOfConfig":"13"},{"size":917,"mtime":1611168047777,"results":"19","hashOfConfig":"13"},{"size":2118,"mtime":1611169997440,"results":"20","hashOfConfig":"13"},{"size":309,"mtime":1611154649929,"results":"21","hashOfConfig":"13"},{"size":5750,"mtime":1611168297083,"results":"22","hashOfConfig":"13"},{"size":2555,"mtime":1611168342151,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"iwdtsc",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"/Users/julietty/cursor-education/Project/src/index.js",[],["50","51"],"/Users/julietty/cursor-education/Project/src/reportWebVitals.js",[],"/Users/julietty/cursor-education/Project/src/App.js",["52"],"/Users/julietty/cursor-education/Project/src/components/Charts/Charts.js",[],"/Users/julietty/cursor-education/Project/src/components/Categories/Categories.js",[],"/Users/julietty/cursor-education/Project/src/components/CurrentBalance/CurrentBalance.jsx",[],"/Users/julietty/cursor-education/Project/src/common/Icon.jsx",["53"],"import React from \"react\";\nimport AddIcon from \"../img/icons/png-icons/png/056-plus.png\";\nimport DeleteIcon from \"../img/icons/png-icons/png/058-error.png\";\nimport EditIcon from \"../img/icons/png-icons/png/218-edit.png\";\nimport SaveIcon from \"../img/icons/png-icons/png/059-success.png\";\nimport CancelIcon from \"../img/icons/png-icons/png/057-minus.png\";\nimport \"./Icon.css\";\n\nfunction Icon({ iconName, size = \"small\", onClick }) {\n  function getUrlByName(iconName) {\n    switch (iconName) {\n      case \"add\":\n        return AddIcon;\n      case \"delete\":\n        return DeleteIcon;\n      case \"edit\":\n        return EditIcon;\n      case \"save\":\n        return SaveIcon;\n      case \"cancel\":\n        return CancelIcon;\n    }\n  }\n\n  return (\n    <div className={`icon-button-${size}`} onClick={onClick}>\n      <img src={getUrlByName(iconName)} alt={`${iconName} icon button`} />\n    </div>\n  );\n}\n\nexport default Icon;\n","/Users/julietty/cursor-education/Project/src/components/transactions/TransactionsPage.jsx",["54","55","56"],"/Users/julietty/cursor-education/Project/src/components/transactions/CurrentBalance.jsx",[],"/Users/julietty/cursor-education/Project/src/components/transactions/TableTransactions.jsx",["57","58"],"import React, { useState } from \"react\";\n\nimport { Table } from \"react-bootstrap\";\n\nimport MomentLocaleUtils, {\n  formatDate,\n  parseDate,\n} from \"react-day-picker/moment\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport TransactionRow from \"./TransactionRow\";\nimport \"./TableTransactions.css\";\nimport Icon from \"../../common/Icon\";\nimport _ from \"lodash\";\n\nfunction TableTransactions({ storedTransactions, onTransactionChange }) {\n  const [transactions, setTransactions] = useState(storedTransactions || []);\n  const [newTransaction, setNewTransaction] = useState(null);\n  const [editableTransactionId, setEditableTransactionId] = useState();\n  const [sort, setSort] = useState(\"desc\");\n  const [sortField, setSortField] = useState(\"id\");\n\n  const headers = [\"Category\", \"Description\", \"Date\", \"Money\", \"Action\"];\n\n  const handleAddNewTransaction = () => {\n    setNewTransaction({\n      id: uuidv4(),\n      category: \"\",\n      description: \"\",\n      date: formatDate(new Date()),\n      money: \"\",\n    });\n  };\n\n  const handleSaveNewTransaction = () => {\n    onTransactionChange([...transactions, newTransaction]);\n    setTransactions([...transactions, newTransaction]);\n    setNewTransaction(null);\n    setEditableTransactionId(null);\n  };\n\n  const handleSaveEditableTransaction = () => {\n    const updatedTransactions = transactions.map((transaction) => {\n      if (transaction.id === newTransaction.id) {\n        return newTransaction;\n      }\n      return transaction;\n    });\n    onTransactionChange(updatedTransactions);\n\n    setTransactions(updatedTransactions);\n    setNewTransaction(null);\n    setEditableTransactionId(null);\n  };\n\n  const handleCancelNewTransaction = () => {\n    setNewTransaction(null);\n    setEditableTransactionId(null);\n  };\n\n  const handleTransactionChange = (transaction) => {\n    setNewTransaction(transaction);\n  };\n\n  const handleEditTransaction = (transaction) => {\n    setEditableTransactionId(transaction.id);\n    setNewTransaction(transaction);\n  };\n\n  const handleDeleteTransaction = (id) => {\n    const arrayTransactions = transactions.filter(\n      (transaction) => transaction.id !== id\n    );\n    onTransactionChange(arrayTransactions);\n    setTransactions([...arrayTransactions]);\n  };\n\n  const buildTransactionRow = (transaction) => {\n    return (\n      <tr key={transaction.id}>\n        <td>{transaction.category}</td>\n        <td>{transaction.description}</td>\n        <td>{transaction.date}</td>\n        <td>{transaction.money}</td>\n        <td>\n          <div className=\"action-buttons\">\n            <Icon\n              iconName=\"edit\"\n              onClick={() => handleEditTransaction(transaction)}\n            />\n            <Icon\n              iconName=\"delete\"\n              onClick={() => handleDeleteTransaction(transaction.id)}\n            />\n          </div>\n        </td>\n      </tr>\n    );\n  };\n\n  const onSort = (category) => {\n    const cloneData = transactions.map((item) => {\n      if (typeof item.date === \"string\" || typeof moneyFormat === \"string\") {\n        const сorrectDateFormat = Date.parse(item.date);\n        const moneyFormat = item.money.replace(/\\D/g, \"\");\n        return {\n          ...item,\n          money: Number(moneyFormat),\n          date: сorrectDateFormat,\n        };\n      }\n      return item;\n    });\n\n    const sortType = sort === `desc` ? `asc` : `desc`;\n    setSort(sortType);\n    setSortField(category);\n    const orderedData = _.orderBy(cloneData, category.toLowerCase(), sortType);\n\n    const correctData = orderedData.map((item) => {\n      const date = new Date(item.date);\n\n      const correctDay = (date) =>\n        date.getDate() <= 9 ? `0${date.getDate()}` : `${date.getDate()}`;\n      const correctMounth = (date) =>\n        date.getMonth() <= 8\n          ? `0${date.getMonth() + 1}`\n          : `${date.getMonth() + 1}`;\n\n      const correctDateFormat = `${correctMounth(date)}/${correctDay(\n        date\n      )}/${date.getFullYear()}`;\n      return {\n        ...item,\n        money: item.money + \"$\",\n        date: correctDateFormat,\n      };\n    });\n    setTransactions(correctData);\n  };\n  return (\n    <div className=\"transaction-table\">\n      <div className=\"d-flex justify-content-end pb-3\">\n        <Icon iconName=\"add\" size=\"big\" onClick={handleAddNewTransaction} />\n      </div>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            {headers.map((header, index) => (\n              <th\n                key={index}\n                onClick={onSort.bind(null, `${header}`)}\n                className={sortField === header ? \"sort\" : \"notSorting\"}\n              >\n                {header}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {transactions.map((transaction) => {\n            if (editableTransactionId === transaction.id) {\n              return (\n                <TransactionRow\n                  key={transaction.id}\n                  {...newTransaction}\n                  onTransactionChange={handleTransactionChange}\n                  onSaveNewTransaction={handleSaveEditableTransaction}\n                  onCancelNewTransaction={handleCancelNewTransaction}\n                />\n              );\n            } else {\n              return buildTransactionRow(transaction);\n            }\n          })}\n          {newTransaction && !editableTransactionId && (\n            <TransactionRow\n              key={newTransaction.id}\n              {...newTransaction}\n              onTransactionChange={handleTransactionChange}\n              onSaveNewTransaction={handleSaveNewTransaction}\n              onCancelNewTransaction={handleCancelNewTransaction}\n            />\n          )}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default TableTransactions;\n","/Users/julietty/cursor-education/Project/src/components/transactions/TransactionRow.jsx",["59"],"import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport Select from \"react-select\";\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport MomentLocaleUtils, {\n  formatDate,\n  parseDate,\n} from \"react-day-picker/moment\";\nimport \"./TransactionRow.css\";\nimport Icon from \"../../common/Icon\";\n\nconst transactionsOptions = [\n  { value: \"food\", label: \"Food\" },\n  { value: \"clothes\", label: \"Clothes\" },\n  { value: \"restaurant\", label: \"Restaurant\" },\n  { value: \"utility bills\", label: \"Utility bills\" },\n  { value: \"pets\", label: \"Pets\" },\n];\n\nfunction TransactionRow({\n  id,\n  category,\n  description,\n  date,\n  money,\n  onTransactionChange,\n  onSaveNewTransaction,\n  onCancelNewTransaction,\n}) {\n  return (\n    <tr className=\"transaction-row\">\n      <td>\n        <Select\n          value={{ value: category, label: category }}\n          onChange={(selectedOption) =>\n            onTransactionChange({\n              id,\n              description,\n              date,\n              money,\n              category: selectedOption.value,\n            })\n          }\n          options={transactionsOptions}\n        />\n      </td>\n      <td>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Description\"\n          onChange={({ target }) =>\n            onTransactionChange({\n              id,\n              description: target.value,\n              date,\n              money,\n              category,\n            })\n          }\n          value={description}\n        />\n      </td>\n      <td>\n        <DayPickerInput\n          formatDate={formatDate}\n          parseDate={parseDate}\n          value={formatDate(date)}\n          onDayChange={(day) =>\n            onTransactionChange({\n              id,\n              description,\n              date: formatDate(day),\n              money,\n              category,\n            })\n          }\n        />\n      </td>\n      <td>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Money\"\n          onChange={({ target }) =>\n            onTransactionChange({\n              id,\n              description,\n              date,\n              money: target.value,\n              category,\n            })\n          }\n          value={money}\n        />\n      </td>\n      <td>\n        <div className=\"action-buttons\">\n          <Icon iconName=\"save\" onClick={onSaveNewTransaction} />\n          <Icon iconName=\"cancel\" onClick={onCancelNewTransaction} />\n        </div>\n      </td>\n    </tr>\n  );\n}\n\nexport default TransactionRow;\n",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":6,"column":3,"nodeType":"66","messageId":"67","endLine":6,"endColumn":7},{"ruleId":"68","severity":1,"message":"69","line":11,"column":5,"nodeType":"70","messageId":"71","endLine":22,"endColumn":6},{"ruleId":"64","severity":1,"message":"72","line":12,"column":10,"nodeType":"66","messageId":"67","endLine":12,"endColumn":17},{"ruleId":"73","severity":1,"message":"74","line":16,"column":6,"nodeType":"75","endLine":16,"endColumn":8,"suggestions":"76"},{"ruleId":"77","severity":1,"message":"78","line":36,"column":3,"nodeType":"79","messageId":"80","endLine":40,"endColumn":4},{"ruleId":"64","severity":1,"message":"81","line":5,"column":8,"nodeType":"66","messageId":"67","endLine":5,"endColumn":25},{"ruleId":"64","severity":1,"message":"82","line":7,"column":3,"nodeType":"66","messageId":"67","endLine":7,"endColumn":12},{"ruleId":"64","severity":1,"message":"81","line":6,"column":8,"nodeType":"66","messageId":"67","endLine":6,"endColumn":25},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'balance' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'storedCharges' and 'storedIncomes'. Either include them or remove the dependency array.","ArrayExpression",["85"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'MomentLocaleUtils' is defined but never used.","'parseDate' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [storedCharges, storedIncomes]",{"range":"88","text":"89"},[549,551],"[storedCharges, storedIncomes]"]