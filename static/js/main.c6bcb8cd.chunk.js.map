{"version":3,"sources":["components/CurrentBalance/CurrentBalance.jsx","components/Charts/Charts.js","components/Categories/Categories.js","img/icons/png-icons/png/056-plus.png","img/icons/png-icons/png/058-error.png","img/icons/png-icons/png/218-edit.png","img/icons/png-icons/png/059-success.png","img/icons/png-icons/png/057-minus.png","common/Icon.jsx","components/transactions/TransactionRow.jsx","components/transactions/TableTransactions.jsx","components/transactions/TransactionsPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["CurrentBalance","className","Charts","Categories","Icon","iconName","size","onClick","src","AddIcon","DeleteIcon","EditIcon","SaveIcon","CancelIcon","getUrlByName","alt","transactionsOptions","value","label","TransactionRow","id","category","description","date","money","onTransactionChange","onSaveNewTransaction","onCancelNewTransaction","onChange","selectedOption","options","Form","Control","type","placeholder","target","formatDate","parseDate","onDayChange","day","TableTransactions","storedTransactions","useState","transactions","setTransactions","newTransaction","setNewTransaction","editableTransactionId","setEditableTransactionId","sort","setSort","sortField","setSortField","handleSaveEditableTransaction","updatedTransactions","map","transaction","handleCancelNewTransaction","handleTransactionChange","buildTransactionRow","handleEditTransaction","arrayTransactions","filter","handleDeleteTransaction","onSort","cloneData","item","moneyFormat","—ÅorrectDateFormat","Date","parse","replace","Number","sortType","correctData","_","orderBy","toLowerCase","correctDateFormat","getMonth","correctMounth","getDate","correctDay","getFullYear","uuidv4","Table","striped","bordered","hover","header","index","bind","TransactionsPage","storedIncomes","JSON","localStorage","getItem","storedCharges","setBalance","useEffect","getBalance","storageKey","setItem","stringify","incomes","charges","incomesSum","reduce","total","income","chargesSum","charge","Tabs","defaultActiveKey","Tab","eventKey","title","storedTransactionKey","App","to","activeClassName","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6bcb8cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CurrentBalance.css';\r\n\r\nfunction CurrentBalance() {\r\n    return (\r\n        <div className=\"balance-block\">\r\n            <div className=\"balance-text-sum\">$100000</div>\r\n            <div className=\"balance-text\">Current Balance</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CurrentBalance;\r\n","import React from 'react';\r\nimport './Charts.css';\r\n\r\nfunction Charts() {\r\n    return (\r\n        <div className=\"charts-page\">\r\n            <h1>Charts</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Charts;\r\n","import React from \"react\";\r\n\r\nfunction Categories() {\r\n  return (\r\n    <div className=\"categories-page\">\r\n      <h1>Categories</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Categories;\r\n","export default __webpack_public_path__ + \"static/media/056-plus.a0162b51.png\";","export default __webpack_public_path__ + \"static/media/058-error.7568cf92.png\";","export default __webpack_public_path__ + \"static/media/218-edit.3ae610dc.png\";","export default __webpack_public_path__ + \"static/media/059-success.6776e7db.png\";","export default __webpack_public_path__ + \"static/media/057-minus.f7328416.png\";","import React from \"react\";\r\nimport AddIcon from \"../img/icons/png-icons/png/056-plus.png\";\r\nimport DeleteIcon from \"../img/icons/png-icons/png/058-error.png\";\r\nimport EditIcon from \"../img/icons/png-icons/png/218-edit.png\";\r\nimport SaveIcon from \"../img/icons/png-icons/png/059-success.png\";\r\nimport CancelIcon from \"../img/icons/png-icons/png/057-minus.png\";\r\nimport \"./Icon.css\";\r\n\r\nfunction Icon({ iconName, size = \"small\", onClick }) {\r\n  function getUrlByName(iconName) {\r\n    switch (iconName) {\r\n      case \"add\":\r\n        return AddIcon;\r\n      case \"delete\":\r\n        return DeleteIcon;\r\n      case \"edit\":\r\n        return EditIcon;\r\n      case \"save\":\r\n        return SaveIcon;\r\n      case \"cancel\":\r\n        return CancelIcon;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`icon-button-${size}`} onClick={onClick}>\r\n      <img src={getUrlByName(iconName)} alt={`${iconName} icon button`} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\r\nimport \"react-day-picker/lib/style.css\";\r\nimport MomentLocaleUtils, {\r\n  formatDate,\r\n  parseDate,\r\n} from \"react-day-picker/moment\";\r\nimport \"./TransactionRow.css\";\r\nimport Icon from \"../../common/Icon\";\r\n\r\nconst transactionsOptions = [\r\n  { value: \"food\", label: \"Food\" },\r\n  { value: \"clothes\", label: \"Clothes\" },\r\n  { value: \"restaurant\", label: \"Restaurant\" },\r\n  { value: \"utility bills\", label: \"Utility bills\" },\r\n  { value: \"pets\", label: \"Pets\" },\r\n];\r\n\r\nfunction TransactionRow({\r\n  id,\r\n  category,\r\n  description,\r\n  date,\r\n  money,\r\n  onTransactionChange,\r\n  onSaveNewTransaction,\r\n  onCancelNewTransaction,\r\n}) {\r\n  return (\r\n    <tr className=\"transaction-row\">\r\n      <td>\r\n        <Select\r\n          value={{ value: category, label: category }}\r\n          onChange={(selectedOption) =>\r\n            onTransactionChange({\r\n              id,\r\n              description,\r\n              date,\r\n              money,\r\n              category: selectedOption.value,\r\n            })\r\n          }\r\n          options={transactionsOptions}\r\n        />\r\n      </td>\r\n      <td>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Description\"\r\n          onChange={({ target }) =>\r\n            onTransactionChange({\r\n              id,\r\n              description: target.value,\r\n              date,\r\n              money,\r\n              category,\r\n            })\r\n          }\r\n          value={description}\r\n        />\r\n      </td>\r\n      <td>\r\n        <DayPickerInput\r\n          formatDate={formatDate}\r\n          parseDate={parseDate}\r\n          value={formatDate(date)}\r\n          onDayChange={(day) =>\r\n            onTransactionChange({\r\n              id,\r\n              description,\r\n              date: formatDate(day),\r\n              money,\r\n              category,\r\n            })\r\n          }\r\n        />\r\n      </td>\r\n      <td>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Money\"\r\n          onChange={({ target }) =>\r\n            onTransactionChange({\r\n              id,\r\n              description,\r\n              date,\r\n              money: target.value,\r\n              category,\r\n            })\r\n          }\r\n          value={money}\r\n        />\r\n      </td>\r\n      <td>\r\n        <div className=\"action-buttons\">\r\n          <Icon iconName=\"save\" onClick={onSaveNewTransaction} />\r\n          <Icon iconName=\"cancel\" onClick={onCancelNewTransaction} />\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default TransactionRow;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport MomentLocaleUtils, {\r\n  formatDate,\r\n  parseDate,\r\n} from \"react-day-picker/moment\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport TransactionRow from \"./TransactionRow\";\r\nimport \"./TableTransactions.css\";\r\nimport Icon from \"../../common/Icon\";\r\nimport _ from \"lodash\";\r\n\r\nfunction TableTransactions({ storedTransactions, onTransactionChange }) {\r\n  const [transactions, setTransactions] = useState(storedTransactions || []);\r\n  const [newTransaction, setNewTransaction] = useState(null);\r\n  const [editableTransactionId, setEditableTransactionId] = useState();\r\n  const [sort, setSort] = useState(\"desc\");\r\n  const [sortField, setSortField] = useState(\"id\");\r\n\r\n  const headers = [\"Category\", \"Description\", \"Date\", \"Money\", \"Action\"];\r\n\r\n  const handleAddNewTransaction = () => {\r\n    setNewTransaction({\r\n      id: uuidv4(),\r\n      category: \"\",\r\n      description: \"\",\r\n      date: formatDate(new Date()),\r\n      money: \"\",\r\n    });\r\n  };\r\n\r\n  const handleSaveNewTransaction = () => {\r\n    onTransactionChange([...transactions, newTransaction]);\r\n    setTransactions([...transactions, newTransaction]);\r\n    setNewTransaction(null);\r\n    setEditableTransactionId(null);\r\n  };\r\n\r\n  const handleSaveEditableTransaction = () => {\r\n    const updatedTransactions = transactions.map((transaction) => {\r\n      if (transaction.id === newTransaction.id) {\r\n        return newTransaction;\r\n      }\r\n      return transaction;\r\n    });\r\n    onTransactionChange(updatedTransactions);\r\n\r\n    setTransactions(updatedTransactions);\r\n    setNewTransaction(null);\r\n    setEditableTransactionId(null);\r\n  };\r\n\r\n  const handleCancelNewTransaction = () => {\r\n    setNewTransaction(null);\r\n    setEditableTransactionId(null);\r\n  };\r\n\r\n  const handleTransactionChange = (transaction) => {\r\n    setNewTransaction(transaction);\r\n  };\r\n\r\n  const handleEditTransaction = (transaction) => {\r\n    setEditableTransactionId(transaction.id);\r\n    setNewTransaction(transaction);\r\n  };\r\n\r\n  const handleDeleteTransaction = (id) => {\r\n    const arrayTransactions = transactions.filter(\r\n      (transaction) => transaction.id !== id\r\n    );\r\n    onTransactionChange(arrayTransactions);\r\n    setTransactions([...arrayTransactions]);\r\n  };\r\n\r\n  const buildTransactionRow = (transaction) => {\r\n    return (\r\n      <tr key={transaction.id}>\r\n        <td>{transaction.category}</td>\r\n        <td>{transaction.description}</td>\r\n        <td>{transaction.date}</td>\r\n        <td>{transaction.money}</td>\r\n        <td>\r\n          <div className=\"action-buttons\">\r\n            <Icon\r\n              iconName=\"edit\"\r\n              onClick={() => handleEditTransaction(transaction)}\r\n            />\r\n            <Icon\r\n              iconName=\"delete\"\r\n              onClick={() => handleDeleteTransaction(transaction.id)}\r\n            />\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const onSort = (category) => {\r\n    const cloneData = transactions.map((item) => {\r\n      if (typeof item.date === \"string\" || typeof moneyFormat === \"string\") {\r\n        const —ÅorrectDateFormat = Date.parse(item.date);\r\n        const moneyFormat = item.money.replace(/\\D/g, \"\");\r\n        return {\r\n          ...item,\r\n          money: Number(moneyFormat),\r\n          date: —ÅorrectDateFormat,\r\n        };\r\n      }\r\n      return item;\r\n    });\r\n\r\n    const sortType = sort === `desc` ? `asc` : `desc`;\r\n    setSort(sortType);\r\n    setSortField(category);\r\n    const orderedData = _.orderBy(cloneData, category.toLowerCase(), sortType);\r\n\r\n    const correctData = orderedData.map((item) => {\r\n      const date = new Date(item.date);\r\n\r\n      const correctDay = (date) =>\r\n        date.getDate() <= 9 ? `0${date.getDate()}` : `${date.getDate()}`;\r\n      const correctMounth = (date) =>\r\n        date.getMonth() <= 8\r\n          ? `0${date.getMonth() + 1}`\r\n          : `${date.getMonth() + 1}`;\r\n\r\n      const correctDateFormat = `${correctMounth(date)}/${correctDay(\r\n        date\r\n      )}/${date.getFullYear()}`;\r\n      return {\r\n        ...item,\r\n        money: item.money + \"$\",\r\n        date: correctDateFormat,\r\n      };\r\n    });\r\n    setTransactions(correctData);\r\n  };\r\n  return (\r\n    <div className=\"transaction-table\">\r\n      <div className=\"d-flex justify-content-end pb-3\">\r\n        <Icon iconName=\"add\" size=\"big\" onClick={handleAddNewTransaction} />\r\n      </div>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            {headers.map((header, index) => (\r\n              <th\r\n                key={index}\r\n                onClick={onSort.bind(null, `${header}`)}\r\n                className={sortField === header ? \"sort\" : \"notSorting\"}\r\n              >\r\n                {header}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {transactions.map((transaction) => {\r\n            if (editableTransactionId === transaction.id) {\r\n              return (\r\n                <TransactionRow\r\n                  key={transaction.id}\r\n                  {...newTransaction}\r\n                  onTransactionChange={handleTransactionChange}\r\n                  onSaveNewTransaction={handleSaveEditableTransaction}\r\n                  onCancelNewTransaction={handleCancelNewTransaction}\r\n                />\r\n              );\r\n            } else {\r\n              return buildTransactionRow(transaction);\r\n            }\r\n          })}\r\n          {newTransaction && !editableTransactionId && (\r\n            <TransactionRow\r\n              key={newTransaction.id}\r\n              {...newTransaction}\r\n              onTransactionChange={handleTransactionChange}\r\n              onSaveNewTransaction={handleSaveNewTransaction}\r\n              onCancelNewTransaction={handleCancelNewTransaction}\r\n            />\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TableTransactions;\r\n","import React, { useEffect, useState } from \"react\";\r\n// import CurrentBalance from \"../CurrentBalance/CurrentBalance\";\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\n\r\nimport \"./TransactionsPage.css\";\r\nimport TableTransactions from \"./TableTransactions\";\r\n\r\nfunction TransactionsPage() {\r\n  const storedIncomes = JSON.parse(localStorage.getItem(\"incomes\")) || [];\r\n  const storedCharges = JSON.parse(localStorage.getItem(\"charges\")) || [];\r\n\r\n  const [balance, setBalance] = useState(0);\r\n\r\n  useEffect(() => {\r\n    getBalance(storedIncomes, storedCharges);\r\n  }, []);\r\n\r\n  const handleTransactionChange = (storageKey, transactions) => {\r\n    localStorage.setItem(storageKey, JSON.stringify(transactions));\r\n    const incomes = storageKey === \"incomes\" ? transactions : storedIncomes;\r\n    const charges = storageKey === \"charges\" ? transactions : storedCharges;\r\n    getBalance(incomes, charges);\r\n  };\r\n\r\n  const getBalance = (incomes, charges) => {\r\n    const incomesSum = incomes.reduce(\r\n      (total, income) => (total += +income.money),\r\n      0\r\n    );\r\n    const chargesSum = charges.reduce(\r\n      (total, charge) => (total += +charge.money),\r\n      0\r\n    );\r\n    setBalance(incomesSum - chargesSum);\r\n  };\r\n  {\r\n    /* <nav className=\"navigation-wrapper\">\r\n        <CurrentBalance balance={balance} />\r\n      </nav> */\r\n  }\r\n  return (\r\n    <div className=\"transaction-page\">\r\n      <Tabs defaultActiveKey=\"charges\" className=\"mb-5\">\r\n        <Tab eventKey=\"charges\" title=\"Charges\">\r\n          <TableTransactions\r\n            storedTransactionKey=\"charges\"\r\n            storedTransactions={storedCharges}\r\n            onTransactionChange={(transactions) =>\r\n              handleTransactionChange(\"charges\", transactions)\r\n            }\r\n          />\r\n        </Tab>\r\n        <Tab eventKey=\"incomes\" title=\"Incomes\">\r\n          <TableTransactions\r\n            storedTransactionKey=\"incomes\"\r\n            storedTransactions={storedIncomes}\r\n            onTransactionChange={(transactions) =>\r\n              handleTransactionChange(\"incomes\", transactions)\r\n            }\r\n          />\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransactionsPage;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  NavLink,\r\n  Route,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport CurrentBalance from \"./components/CurrentBalance/CurrentBalance\";\r\nimport Charts from \"./components/Charts/Charts\";\r\nimport Categories from \"./components/Categories/Categories\";\r\nimport TransactionsPage from \"./components/transactions/TransactionsPage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"app\">\r\n        <div className=\"navigation-wrapper\">\r\n          <CurrentBalance />\r\n          <div className=\"link-list\">\r\n            <NavLink\r\n              to=\"/home\"\r\n              className=\"app-link\"\r\n              activeClassName=\"active-link\"\r\n            >\r\n              Home\r\n            </NavLink>\r\n            <NavLink\r\n              to=\"/charts\"\r\n              className=\"app-link\"\r\n              activeClassName=\"active-link\"\r\n            >\r\n              Charts\r\n            </NavLink>\r\n            <NavLink\r\n              to=\"/categories\"\r\n              className=\"app-link\"\r\n              activeClassName=\"active-link\"\r\n            >\r\n              Categories\r\n            </NavLink>\r\n          </div>\r\n        </div>\r\n        <div className=\"page\">\r\n          <Switch>\r\n            <Route path=\"/charts\" component={Charts}></Route>\r\n            <Route path=\"/categories\" component={Categories}></Route>\r\n            <Route path=\"/\" component={TransactionsPage}></Route>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}