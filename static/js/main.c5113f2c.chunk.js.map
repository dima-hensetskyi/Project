{"version":3,"sources":["components/CurrentBalance/CurrentBalance.jsx","components/Charts/Charts.js","components/Categories/Categories.js","img/icons/png-icons/png/056-plus.png","img/icons/png-icons/png/058-error.png","img/icons/png-icons/png/218-edit.png","img/icons/png-icons/png/059-success.png","img/icons/png-icons/png/057-minus.png","common/Icon.jsx","components/transactions/TransactionRow.jsx","components/transactions/TableTransactions.jsx","components/transactions/TransactionsPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["CurrentBalance","className","Charts","Categories","Icon","iconName","size","onClick","src","AddIcon","DeleteIcon","EditIcon","SaveIcon","CancelIcon","getUrlByName","alt","transactionsOptions","value","label","TransactionRow","id","category","description","date","money","onTransactionChange","onSaveNewTransaction","onCancelNewTransaction","onChange","selectedOption","options","Form","Control","type","placeholder","target","formatDate","parseDate","onDayChange","day","TableTransactions","storedTransactions","useState","transactions","setTransactions","newTransaction","setNewTransaction","editableTransactionId","setEditableTransactionId","sort","setSort","sortField","setSortField","handleSaveEditableTransaction","updatedTransactions","map","transaction","handleCancelNewTransaction","handleTransactionChange","buildTransactionRow","handleEditTransaction","arrayTransactions","filter","handleDeleteTransaction","onSort","cloneData","item","moneyFormat","—ÅorrectDateFormat","Date","parse","replace","Number","sortType","correctData","_","orderBy","toLowerCase","correctDateFormat","getMonth","correctMounth","getDate","correctDay","getFullYear","uuidv4","Table","striped","bordered","hover","header","index","bind","TransactionsPage","storedIncomes","JSON","localStorage","getItem","storedCharges","setBalance","useEffect","getBalance","storageKey","setItem","stringify","incomes","charges","incomesSum","reduce","total","income","chargesSum","charge","Tabs","defaultActiveKey","Tab","eventKey","title","storedTransactionKey","App","to","activeClassName","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5113f2c.chunk.js","sourcesContent":["import React from 'react';\nimport './CurrentBalance.css';\n\nfunction CurrentBalance() {\n    return (\n        <div className=\"balance-block\">\n            <div className=\"balance-text-sum\">$100000</div>\n            <div className=\"balance-text\">Current Balance</div>\n        </div>\n    );\n}\n\nexport default CurrentBalance;\n","import React from 'react';\nimport './Charts.css';\n\nfunction Charts() {\n    return (\n        <div className=\"charts-page\">\n            <h1>Charts</h1>\n        </div>\n    );\n}\n\nexport default Charts;\n","import React from \"react\";\n\nfunction Categories() {\n  return (\n    <div className=\"categories-page\">\n      <h1>Categories</h1>\n    </div>\n  );\n}\n\nexport default Categories;\n","export default __webpack_public_path__ + \"static/media/056-plus.a0162b51.png\";","export default __webpack_public_path__ + \"static/media/058-error.7568cf92.png\";","export default __webpack_public_path__ + \"static/media/218-edit.3ae610dc.png\";","export default __webpack_public_path__ + \"static/media/059-success.6776e7db.png\";","export default __webpack_public_path__ + \"static/media/057-minus.f7328416.png\";","import React from \"react\";\nimport AddIcon from \"../img/icons/png-icons/png/056-plus.png\";\nimport DeleteIcon from \"../img/icons/png-icons/png/058-error.png\";\nimport EditIcon from \"../img/icons/png-icons/png/218-edit.png\";\nimport SaveIcon from \"../img/icons/png-icons/png/059-success.png\";\nimport CancelIcon from \"../img/icons/png-icons/png/057-minus.png\";\nimport \"./Icon.css\";\n\nfunction Icon({ iconName, size = \"small\", onClick }) {\n  function getUrlByName(iconName) {\n    switch (iconName) {\n      case \"add\":\n        return AddIcon;\n      case \"delete\":\n        return DeleteIcon;\n      case \"edit\":\n        return EditIcon;\n      case \"save\":\n        return SaveIcon;\n      case \"cancel\":\n        return CancelIcon;\n    }\n  }\n\n  return (\n    <div className={`icon-button-${size}`} onClick={onClick}>\n      <img src={getUrlByName(iconName)} alt={`${iconName} icon button`} />\n    </div>\n  );\n}\n\nexport default Icon;\n","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport Select from \"react-select\";\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport MomentLocaleUtils, {\n  formatDate,\n  parseDate,\n} from \"react-day-picker/moment\";\nimport \"./TransactionRow.css\";\nimport Icon from \"../../common/Icon\";\n\nconst transactionsOptions = [\n  { value: \"food\", label: \"Food\" },\n  { value: \"clothes\", label: \"Clothes\" },\n  { value: \"restaurant\", label: \"Restaurant\" },\n  { value: \"utility bills\", label: \"Utility bills\" },\n  { value: \"pets\", label: \"Pets\" },\n];\n\nfunction TransactionRow({\n  id,\n  category,\n  description,\n  date,\n  money,\n  onTransactionChange,\n  onSaveNewTransaction,\n  onCancelNewTransaction,\n}) {\n  return (\n    <tr className=\"transaction-row\">\n      <td>\n        <Select\n          value={{ value: category, label: category }}\n          onChange={(selectedOption) =>\n            onTransactionChange({\n              id,\n              description,\n              date,\n              money,\n              category: selectedOption.value,\n            })\n          }\n          options={transactionsOptions}\n        />\n      </td>\n      <td>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Description\"\n          onChange={({ target }) =>\n            onTransactionChange({\n              id,\n              description: target.value,\n              date,\n              money,\n              category,\n            })\n          }\n          value={description}\n        />\n      </td>\n      <td>\n        <DayPickerInput\n          formatDate={formatDate}\n          parseDate={parseDate}\n          value={formatDate(date)}\n          onDayChange={(day) =>\n            onTransactionChange({\n              id,\n              description,\n              date: formatDate(day),\n              money,\n              category,\n            })\n          }\n        />\n      </td>\n      <td>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Money\"\n          onChange={({ target }) =>\n            onTransactionChange({\n              id,\n              description,\n              date,\n              money: target.value,\n              category,\n            })\n          }\n          value={money}\n        />\n      </td>\n      <td>\n        <div className=\"action-buttons\">\n          <Icon iconName=\"save\" onClick={onSaveNewTransaction} />\n          <Icon iconName=\"cancel\" onClick={onCancelNewTransaction} />\n        </div>\n      </td>\n    </tr>\n  );\n}\n\nexport default TransactionRow;\n","import React, { useState } from \"react\";\n\nimport { Table } from \"react-bootstrap\";\n\nimport MomentLocaleUtils, {\n  formatDate,\n  parseDate,\n} from \"react-day-picker/moment\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport TransactionRow from \"./TransactionRow\";\nimport \"./TableTransactions.css\";\nimport Icon from \"../../common/Icon\";\nimport _ from \"lodash\";\n\nfunction TableTransactions({ storedTransactions, onTransactionChange }) {\n  const [transactions, setTransactions] = useState(storedTransactions || []);\n  const [newTransaction, setNewTransaction] = useState(null);\n  const [editableTransactionId, setEditableTransactionId] = useState();\n  const [sort, setSort] = useState(\"desc\");\n  const [sortField, setSortField] = useState(\"id\");\n\n  const headers = [\"Category\", \"Description\", \"Date\", \"Money\", \"Action\"];\n\n  const handleAddNewTransaction = () => {\n    setNewTransaction({\n      id: uuidv4(),\n      category: \"\",\n      description: \"\",\n      date: formatDate(new Date()),\n      money: \"\",\n    });\n  };\n\n  const handleSaveNewTransaction = () => {\n    onTransactionChange([...transactions, newTransaction]);\n    setTransactions([...transactions, newTransaction]);\n    setNewTransaction(null);\n    setEditableTransactionId(null);\n  };\n\n  const handleSaveEditableTransaction = () => {\n    const updatedTransactions = transactions.map((transaction) => {\n      if (transaction.id === newTransaction.id) {\n        return newTransaction;\n      }\n      return transaction;\n    });\n    onTransactionChange(updatedTransactions);\n\n    setTransactions(updatedTransactions);\n    setNewTransaction(null);\n    setEditableTransactionId(null);\n  };\n\n  const handleCancelNewTransaction = () => {\n    setNewTransaction(null);\n    setEditableTransactionId(null);\n  };\n\n  const handleTransactionChange = (transaction) => {\n    setNewTransaction(transaction);\n  };\n\n  const handleEditTransaction = (transaction) => {\n    setEditableTransactionId(transaction.id);\n    setNewTransaction(transaction);\n  };\n\n  const handleDeleteTransaction = (id) => {\n    const arrayTransactions = transactions.filter(\n      (transaction) => transaction.id !== id\n    );\n    onTransactionChange(arrayTransactions);\n    setTransactions([...arrayTransactions]);\n  };\n\n  const buildTransactionRow = (transaction) => {\n    return (\n      <tr key={transaction.id}>\n        <td>{transaction.category}</td>\n        <td>{transaction.description}</td>\n        <td>{transaction.date}</td>\n        <td>{transaction.money}</td>\n        <td>\n          <div className=\"action-buttons\">\n            <Icon\n              iconName=\"edit\"\n              onClick={() => handleEditTransaction(transaction)}\n            />\n            <Icon\n              iconName=\"delete\"\n              onClick={() => handleDeleteTransaction(transaction.id)}\n            />\n          </div>\n        </td>\n      </tr>\n    );\n  };\n\n  const onSort = (category) => {\n    const cloneData = transactions.map((item) => {\n      if (typeof item.date === \"string\" || typeof moneyFormat === \"string\") {\n        const —ÅorrectDateFormat = Date.parse(item.date);\n        const moneyFormat = item.money.replace(/\\D/g, \"\");\n        return {\n          ...item,\n          money: Number(moneyFormat),\n          date: —ÅorrectDateFormat,\n        };\n      }\n      return item;\n    });\n\n    const sortType = sort === `desc` ? `asc` : `desc`;\n    setSort(sortType);\n    setSortField(category);\n    const orderedData = _.orderBy(cloneData, category.toLowerCase(), sortType);\n\n    const correctData = orderedData.map((item) => {\n      const date = new Date(item.date);\n\n      const correctDay = (date) =>\n        date.getDate() <= 9 ? `0${date.getDate()}` : `${date.getDate()}`;\n      const correctMounth = (date) =>\n        date.getMonth() <= 8\n          ? `0${date.getMonth() + 1}`\n          : `${date.getMonth() + 1}`;\n\n      const correctDateFormat = `${correctMounth(date)}/${correctDay(\n        date\n      )}/${date.getFullYear()}`;\n      return {\n        ...item,\n        money: item.money + \"$\",\n        date: correctDateFormat,\n      };\n    });\n    setTransactions(correctData);\n  };\n  return (\n    <div className=\"transaction-table\">\n      <div className=\"d-flex justify-content-end pb-3\">\n        <Icon iconName=\"add\" size=\"big\" onClick={handleAddNewTransaction} />\n      </div>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            {headers.map((header, index) => (\n              <th\n                key={index}\n                onClick={onSort.bind(null, `${header}`)}\n                className={sortField === header ? \"sort\" : \"notSorting\"}\n              >\n                {header}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {transactions.map((transaction) => {\n            if (editableTransactionId === transaction.id) {\n              return (\n                <TransactionRow\n                  key={transaction.id}\n                  {...newTransaction}\n                  onTransactionChange={handleTransactionChange}\n                  onSaveNewTransaction={handleSaveEditableTransaction}\n                  onCancelNewTransaction={handleCancelNewTransaction}\n                />\n              );\n            } else {\n              return buildTransactionRow(transaction);\n            }\n          })}\n          {newTransaction && !editableTransactionId && (\n            <TransactionRow\n              key={newTransaction.id}\n              {...newTransaction}\n              onTransactionChange={handleTransactionChange}\n              onSaveNewTransaction={handleSaveNewTransaction}\n              onCancelNewTransaction={handleCancelNewTransaction}\n            />\n          )}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default TableTransactions;\n","import React, { useEffect, useState } from \"react\";\n// import CurrentBalance from \"../CurrentBalance/CurrentBalance\";\nimport { Tabs, Tab } from \"react-bootstrap\";\n\nimport \"./TransactionsPage.css\";\nimport TableTransactions from \"./TableTransactions\";\n\nfunction TransactionsPage() {\n  const storedIncomes = JSON.parse(localStorage.getItem(\"incomes\")) || [];\n  const storedCharges = JSON.parse(localStorage.getItem(\"charges\")) || [];\n\n  const [balance, setBalance] = useState(0);\n\n  useEffect(() => {\n    getBalance(storedIncomes, storedCharges);\n  }, []);\n\n  const handleTransactionChange = (storageKey, transactions) => {\n    localStorage.setItem(storageKey, JSON.stringify(transactions));\n    const incomes = storageKey === \"incomes\" ? transactions : storedIncomes;\n    const charges = storageKey === \"charges\" ? transactions : storedCharges;\n    getBalance(incomes, charges);\n  };\n\n  const getBalance = (incomes, charges) => {\n    const incomesSum = incomes.reduce(\n      (total, income) => (total += +income.money),\n      0\n    );\n    const chargesSum = charges.reduce(\n      (total, charge) => (total += +charge.money),\n      0\n    );\n    setBalance(incomesSum - chargesSum);\n  };\n  {\n    /* <nav className=\"navigation-wrapper\">\n        <CurrentBalance balance={balance} />\n      </nav> */\n  }\n  return (\n    <div className=\"transaction-page\">\n      <Tabs defaultActiveKey=\"charges\" className=\"mb-5\">\n        <Tab eventKey=\"charges\" title=\"Charges\">\n          <TableTransactions\n            storedTransactionKey=\"charges\"\n            storedTransactions={storedCharges}\n            onTransactionChange={(transactions) =>\n              handleTransactionChange(\"charges\", transactions)\n            }\n          />\n        </Tab>\n        <Tab eventKey=\"incomes\" title=\"Incomes\">\n          <TableTransactions\n            storedTransactionKey=\"incomes\"\n            storedTransactions={storedIncomes}\n            onTransactionChange={(transactions) =>\n              handleTransactionChange(\"incomes\", transactions)\n            }\n          />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default TransactionsPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  BrowserRouter as Router,\n  Link,\n  NavLink,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport CurrentBalance from \"./components/CurrentBalance/CurrentBalance\";\nimport Charts from \"./components/Charts/Charts\";\nimport Categories from \"./components/Categories/Categories\";\nimport TransactionsPage from \"./components/transactions/TransactionsPage\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <div className=\"navigation-wrapper\">\n          <CurrentBalance />\n          <div className=\"link-list\">\n            <NavLink\n              to=\"/home\"\n              className=\"app-link\"\n              activeClassName=\"active-link\"\n            >\n              Home\n            </NavLink>\n            <NavLink\n              to=\"/charts\"\n              className=\"app-link\"\n              activeClassName=\"active-link\"\n            >\n              Charts\n            </NavLink>\n            <NavLink\n              to=\"/categories\"\n              className=\"app-link\"\n              activeClassName=\"active-link\"\n            >\n              Categories\n            </NavLink>\n          </div>\n        </div>\n        <div className=\"page\">\n          <Switch>\n            <Route path=\"/charts\" component={Charts}></Route>\n            <Route path=\"/categories\" component={Categories}></Route>\n            <Route path=\"/\" component={TransactionsPage}></Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}